{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MDT\\\\IdeaProjects\\\\solar-panel-monitoring-system\\\\front\\\\src\\\\components\\\\LiveChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst LiveChart = ({\n  data\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: \"Voltage (V)\",\n      data: [],\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n    }, {\n      label: \"Current (A)\",\n      data: [],\n      borderColor: \"rgb(54, 162, 235)\",\n      backgroundColor: \"rgba(54, 162, 235, 0.5)\"\n    }, {\n      label: \"Power (W)\",\n      data: [],\n      borderColor: \"rgb(75, 192, 192)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.5)\"\n    }]\n  });\n  useEffect(() => {\n    if (data) {\n      const timestamp = new Date(data.timestamp).toLocaleTimeString();\n      setChartData(prev => {\n        const newLabels = [...prev.labels, timestamp].slice(-20);\n        const newVoltage = [...prev.datasets[0].data, data.voltage].slice(-20);\n        const newCurrent = [...prev.datasets[1].data, data.current].slice(-20);\n        const newPower = [...prev.datasets[2].data, data.power].slice(-20);\n        return {\n          labels: newLabels,\n          datasets: [{\n            ...prev.datasets[0],\n            data: newVoltage\n          }, {\n            ...prev.datasets[1],\n            data: newCurrent\n          }, {\n            ...prev.datasets[2],\n            data: newPower\n          }]\n        };\n      });\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: \"top\"\n          },\n          title: {\n            display: true,\n            text: \"Solar Panel Performance\"\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: false\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(LiveChart, \"j5UZMCuKjcif8aCssmNmlXrS4Zw=\");\n_c = LiveChart;\nexport default LiveChart;\nvar _c;\n$RefreshReg$(_c, \"LiveChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","LiveChart","data","_s","chartData","setChartData","labels","datasets","label","borderColor","backgroundColor","timestamp","Date","toLocaleTimeString","prev","newLabels","slice","newVoltage","voltage","newCurrent","current","newPower","power","className","children","options","responsive","plugins","legend","position","title","display","text","scales","y","beginAtZero","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/MDT/IdeaProjects/solar-panel-monitoring-system/front/src/components/LiveChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\nconst LiveChart = ({ data }) => {\r\n    const [chartData, setChartData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: \"Voltage (V)\",\r\n                data: [],\r\n                borderColor: \"rgb(255, 99, 132)\",\r\n                backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n            },\r\n            {\r\n                label: \"Current (A)\",\r\n                data: [],\r\n                borderColor: \"rgb(54, 162, 235)\",\r\n                backgroundColor: \"rgba(54, 162, 235, 0.5)\",\r\n            },\r\n            {\r\n                label: \"Power (W)\",\r\n                data: [],\r\n                borderColor: \"rgb(75, 192, 192)\",\r\n                backgroundColor: \"rgba(75, 192, 192, 0.5)\",\r\n            },\r\n        ],\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            const timestamp = new Date(data.timestamp).toLocaleTimeString();\r\n            setChartData((prev) => {\r\n                const newLabels = [...prev.labels, timestamp].slice(-20);\r\n                const newVoltage = [...prev.datasets[0].data, data.voltage].slice(-20);\r\n                const newCurrent = [...prev.datasets[1].data, data.current].slice(-20);\r\n                const newPower = [...prev.datasets[2].data, data.power].slice(-20);\r\n\r\n                return {\r\n                    labels: newLabels,\r\n                    datasets: [\r\n                        { ...prev.datasets[0], data: newVoltage },\r\n                        { ...prev.datasets[1], data: newCurrent },\r\n                        { ...prev.datasets[2], data: newPower },\r\n                    ],\r\n                };\r\n            });\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <Line\r\n                data={chartData}\r\n                options={{\r\n                    responsive: true,\r\n                    plugins: {\r\n                        legend: {\r\n                            position: \"top\",\r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            text: \"Solar Panel Performance\",\r\n                        },\r\n                    },\r\n                    scales: {\r\n                        y: {\r\n                            beginAtZero: false,\r\n                        },\r\n                    },\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LiveChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElBT,OAAO,CAACU,QAAQ,CACZT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AAED,MAAMI,SAAS,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC;IACvCmB,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,aAAa;MACpBN,IAAI,EAAE,EAAE;MACRO,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACrB,CAAC,EACD;MACIF,KAAK,EAAE,aAAa;MACpBN,IAAI,EAAE,EAAE;MACRO,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACrB,CAAC,EACD;MACIF,KAAK,EAAE,WAAW;MAClBN,IAAI,EAAE,EAAE;MACRO,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACrB,CAAC;EAET,CAAC,CAAC;EAEFxB,SAAS,CAAC,MAAM;IACZ,IAAIgB,IAAI,EAAE;MACN,MAAMS,SAAS,GAAG,IAAIC,IAAI,CAACV,IAAI,CAACS,SAAS,CAAC,CAACE,kBAAkB,CAAC,CAAC;MAC/DR,YAAY,CAAES,IAAI,IAAK;QACnB,MAAMC,SAAS,GAAG,CAAC,GAAGD,IAAI,CAACR,MAAM,EAAEK,SAAS,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC;QACxD,MAAMC,UAAU,GAAG,CAAC,GAAGH,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,CAACL,IAAI,EAAEA,IAAI,CAACgB,OAAO,CAAC,CAACF,KAAK,CAAC,CAAC,EAAE,CAAC;QACtE,MAAMG,UAAU,GAAG,CAAC,GAAGL,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,CAACL,IAAI,EAAEA,IAAI,CAACkB,OAAO,CAAC,CAACJ,KAAK,CAAC,CAAC,EAAE,CAAC;QACtE,MAAMK,QAAQ,GAAG,CAAC,GAAGP,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,CAACL,IAAI,EAAEA,IAAI,CAACoB,KAAK,CAAC,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC;QAElE,OAAO;UACHV,MAAM,EAAES,SAAS;UACjBR,QAAQ,EAAE,CACN;YAAE,GAAGO,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC;YAAEL,IAAI,EAAEe;UAAW,CAAC,EACzC;YAAE,GAAGH,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC;YAAEL,IAAI,EAAEiB;UAAW,CAAC,EACzC;YAAE,GAAGL,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC;YAAEL,IAAI,EAAEmB;UAAS,CAAC;QAE/C,CAAC;MACL,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACnB,IAAI,CAAC,CAAC;EAEV,oBACIH,OAAA;IAAKwB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC5BzB,OAAA,CAACX,IAAI;MACDc,IAAI,EAAEE,SAAU;MAChBqB,OAAO,EAAE;QACLC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACLC,MAAM,EAAE;YACJC,QAAQ,EAAE;UACd,CAAC;UACDC,KAAK,EAAE;YACHC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UACV;QACJ,CAAC;QACDC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCC,WAAW,EAAE;UACjB;QACJ;MACJ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACpC,EAAA,CAtEIF,SAAS;AAAAuC,EAAA,GAATvC,SAAS;AAwEf,eAAeA,SAAS;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}